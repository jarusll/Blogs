
  *Before talking about abstraction, we need to talk about curring*
* What is currying?


* How do you express an abstraction?
  
  #+BEGIN_SRC bnf
  <abstraction> = "lambda" <variable> "." <expression>
  #+END_SRC

  A variable in our language is a sequence of capital letters
  #+BEGIN_SRC bnf
  <variable> = [A-Z]:+
  #+END_SRC

  An abstraction could be over 
  - a <literal> when the function is a [[https://www.cuemath.com/calculus/constant-functions/][constant function]]
    #+BEGIN_SRC js
function PI(){
    return 3.141592653589793238
}
    #+END_SRC
  - a <variable_expression> when the abstraction is over a variable expression
    #+BEGIN_SRC js
function increment(value){
    return value + 1
}
    #+END_SRC
  - an <abstraction> when its a curried function

** What is a currying?
   [[https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983][Currying]] is the process of passing arguments to a function one at a time.
   #+BEGIN_SRC js
function add(x){
    return function(y){
	return x + y
    }
}
   #+END_SRC

   #+BEGIN_SRC bnf
   <expression> =  <literal> | <variable_expression> | <abstraction>
   #+END_SRC

   A variable expression could be 
   - a single variable -> =X=
   - variable followed by operator followed by a variable expression -> =X + Y / 1=
   - number followed by operator followed by a variable expression -> =1 * X + Y=

   #+BEGIN_SRC bnf
   <variable_expression> = <variable> | <variable> <operation> <variable_expression> | <number> <operation> <variable_expression>
   <operator> = "+" | "-" | "*" | "/"
   #+END_SRC

   =Nearley Lambda= will support the operations "+", "-",  "*", "/"
   
* What operations will =nearley lambda= support?
  Primitive math operations such as addition, subtraction, multiplication & division
  
* Do these operations have different precedence?
  Yes
  
* How do we handle operator precedence in EBNF?
  
