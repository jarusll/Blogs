#+title: Redux Primer
#+date: 2022-06-04 
#+draft: true
#+filetags: solution

* Redux primer

  What do you start with?
  - Actions

  What are =Actions=?
  - User interactable actions
  - Events in the application logic

  What does an action look like?
  - Its a javascript object
    #+BEGIN_SRC json
{
    "type": String,
    "payload": JSONValue
}
    #+END_SRC

  - The =type= is a string constant typically representing an action name
  - The =payload= is the data associated with the action event

  Eg
  #+BEGIN_SRC json
{
    "type": "ADD_POST",
    "payload": {
	"tags": ["primer"]
	"text": "What do you start with?..."
    }
}
  #+END_SRC

  Would it be convenient if we had helper functions to create the action objects?
  - Yes, they are called action creators

    #+BEGIN_SRC javascript
function addPost({tags, text}){
    return {
	type: "ADD_POST",
	payload: {
	    tags,
	    text
	}
    }
}
    #+END_SRC

  Can we do better?
  - Yes, =createAction=, thanks =@reduxjs/toolkit=
    #+BEGIN_SRC javascript
    const addPost = createAction('ADD_POST')
    #+END_SRC

    #+BEGIN_EXAMPLE
addPost(x) => {
    type: "ADD_POST",
    payload: x
}
    #+END_EXAMPLE

  Whats the next step?
  - =Reducers=

  What are reducers?
  - Reducers manage your state using =prevstate= and =action= to give you =nextstate=

  - =PrevState + Action => NextState=

  What do they look like?
  - Here's a trivial example of a reducer
    #+BEGIN_SRC javascript
const initialState = 0
function counterReducer(state = initialState, action){
    switch(action.type){
    case "INCREMENT":
	return state + 1
    case "DECREMENT":
	return state - 1
    default:
	return state
    }
}
    #+END_SRC
    
  Can we do better?
  - Yes, =createReducer=, thanks again =@reduxjs/toolkit=
    
  #+BEGIN_SRC javascript
const { createAction, createReducer } = require('@reduxjs/toolkit')

const increment = createAction('counter/increment')
const decrement = createAction('counter/decrement')

const initialState = 0
const counterReducer = createReducer(initialState, (builder) => {
    builder
	.addCase(increment, (state, action) => state + 1)
	.addCase(decrement, (state, action) => state - 1)
}) 
  #+END_SRC

  Can we couple counter actions & counter reducer for convenience?
  - Yes, its called a slice

  Why is it called slice?
  - Because they are a slice of the global state

    #+BEGIN_SRC javascript
const { createSlice } = require('@reduxjs/toolkit')

const initialState = 0
const counterSlice = createSlice({
    name: 'counter',
    initialState,
    reducers: {
	increment: (state) => state + 1,
	decrement: (state) => state - 1
    },
})
    #+END_SRC

  How do we access the reducer & actions in the slice?
  #+BEGIN_SRC javascript
  const {actions, reducer} = counterSlice
  console.log(actions) // { increment, decrement }
  
  #+END_SRC

  *From this point on, =reducers= and =slices= may be used interchangably*

  How to decide what reducers to make?
  - Every reducer in the store(global state) is associated with a key

  Eg - The value returned by =counterReducer= will be associated with key =count= in global state.
  #+BEGIN_SRC json
{
    "count": counterReducer
}
  #+END_SRC

  - So one good way to figure out the reducers is by determining the states you will access.

  Whats the next part?
  - =Store=

  Whats a store?
  - The store is the global state

  How do you make a store?
  #+BEGIN_SRC javascript
const { configureStore } = require('@reduxjs/toolkit')
const store = redux.createStore({
    reducer: {
	count: counterSlice.reducer
    }
})
  #+END_SRC

  How do you change state?
  - By dispatching actions
    #+BEGIN_SRC javascript
const { increment } = counterSlice.actions
store.dispatch(increment())    
    #+END_SRC

  Has =redux= come a long way?
  - Yes, thanks =@reduxjs/toolkit=
