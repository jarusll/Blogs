#+title: Rapid redux prototyping
#+date: 2022-06-04 
#+draft: true
#+filetags: solution

* Objectives
  Create a quiz app wit react redux
  It should
  - Have questions with multiple choices
  - On result screen, show the score and unanswered questions


* Types
  
  |--------------+----------------------------------------------------------------------------|
  | Name         | Shape                                                                      |
  |--------------+----------------------------------------------------------------------------|
  | Quiz         | [Question, ...]                                                            |
  | QuizStatus   | STARTED | FINISHED                                                         |
  | Question     | { id: QuestionID, text: String, options: [Option, ...], answer: AnswerID } |
  | QuestionID   | Integer                                                                    |
  | Option       | { id: OptionID, text: String }                                             |
  | OptionID     | Integer                                                                    |
  | AnswerStatus | CORRECT | WRONG | UNANSWERED                                               |
  |--------------+----------------------------------------------------------------------------|


* Actions in the app

**  What are actions?

**  How to decide actions?
   Actions consists of
   - User interactions in the app
   - Events in the app during its lifecycle


*** What are the events in the quiz?
    - Start the quiz
    - End the quiz

*** What are the user interactions?    
    - Submit answer by checking the radio button
    - Next question to skip the current question

** Actions
   |-----------------+--------------------------------------------------------------------------------------------|
   | Action Name     | Action Description                                                                         |
   |-----------------+--------------------------------------------------------------------------------------------|
   | START_QUIZ      | Starts the quiz, could be automatically triggered or through an action like a button press |
   | END_QUIZ        | Ends the quiz, triggered when last question is submitted                                   |
   | SUBMIT_QUESTION | Triggers when you submit a question                                                        |
   | NEXT_QUESTION   | Triggers when timer is run out or when user clicks =Next= button                           |
   |-----------------+--------------------------------------------------------------------------------------------|

   #+BEGIN_SRC js
export const start_quiz = "START_QUIZ"
export const end_quiz = "END_QUIZ"
export const submit_answer = "SUBMIT_ANSWER"
export const next_question = "NEXT_QUESTION"
   #+END_SRC

** Action Creators

   #+BEGIN_SRC js
function startQuiz(questions){
    return {
	type: START_QUIZ,
	payload: {
	    questions
	}
    }
}

function endQuiz(){
    return {
	type: END_QUIZ
    }
}

function submitAnswer(id, status){
    return {
	type: END_QUIZ
	payload: {
	    questionID: id
	    answerStatus: status
	}
    }
}

function nextQuestion(){
    return {
	type: NEXT_QUESTION
	payload: {
	    questionID: id
	    answerStatus: status
	}
    }
}
   #+END_SRC

* Reducers

  Reducers to build application logic
  |-------------------+-----------------------------------------+-------------------------------|
  | Reducer           | Logic                                   | Shape                         |
  |-------------------+-----------------------------------------+-------------------------------|
  | scoreReducer      | Keep track of score ie Correct answers  | Integer                       |
  | answerReducer     | Keep track of answers along with status | map<QuestionId, AnswerStatus> |
  | unansweredReducer | Keep track of unanswered questions      | [Question.Text]               |
  |-------------------+-----------------------------------------+-------------------------------|
